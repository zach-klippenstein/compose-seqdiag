package com.zachklipp.seqdiag

import androidx.compose.runtime.Composable
import androidx.compose.runtime.Composer
import androidx.compose.runtime.currentComposer
import com.google.testing.junit.testparameterinjector.TestParameter
import com.google.testing.junit.testparameterinjector.TestParameter.TestParameterValuesProvider
import org.junit.Test
import java.lang.reflect.Method

@Suppress("JUnitMalformedDeclaration")
class SequenceDiagramSamplesTest : BaseSnapshotTest() {

    fun interface SampleFunction {
        @Composable
        operator fun invoke()
    }

    @Test
    fun sample(
        @TestParameter(valuesProvider = SampleFunctionProvider::class)
        sampleFunction: SampleFunction,
    ) {
        snapshot {
            sampleFunction()
        }
    }

    /**
     * Provides [SampleFunction]s for every sample function defined in a class. Sample functions
     * must by `@Composable` and have no kotlin parameters, aside from the ones generated by
     * compose.
     */
    class SampleFunctionProvider : TestParameterValuesProvider {
        override fun provideValues(): List<SampleFunction> =
            Class.forName("com.zachklipp.seqdiag.samples.SequenceDiagramSamples").declaredMethods
                .mapNotNull { method ->
                    val params = method.parameters
                    if (params.size == 2 &&
                        params[0].type == Composer::class.java &&
                        params[1].type == Int::class.java
                    ) {
                        method.asSampleFunction()
                    } else null
                }

        private fun Method.asSampleFunction() = object : SampleFunction {
            override fun toString(): String = this@asSampleFunction.name

            @Composable
            override fun invoke() {
                val composer = currentComposer
                this@asSampleFunction.invoke(
                    null,
                    composer,
                    0
                )
            }
        }
    }
}